{"version":3,"file":"index.js","mappings":"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","sources":["webpack://CssSelectorGenerator/webpack/universalModuleDefinition","webpack://CssSelectorGenerator/./node_modules/cartesian/index.js","webpack://CssSelectorGenerator/./node_modules/xtend/immutable.js","webpack://CssSelectorGenerator/webpack/bootstrap","webpack://CssSelectorGenerator/webpack/runtime/compat get default export","webpack://CssSelectorGenerator/webpack/runtime/define property getters","webpack://CssSelectorGenerator/webpack/runtime/hasOwnProperty shorthand","webpack://CssSelectorGenerator/webpack/runtime/make namespace object","webpack://CssSelectorGenerator/./node_modules/iselement/module/index.js","webpack://CssSelectorGenerator/./src/utilities-dom.ts","webpack://CssSelectorGenerator/./src/selector-nth-child.ts","webpack://CssSelectorGenerator/./src/constants.ts","webpack://CssSelectorGenerator/./src/utilities-options.ts","webpack://CssSelectorGenerator/./src/utilities-data.ts","webpack://CssSelectorGenerator/./src/selector-attribute.ts","webpack://CssSelectorGenerator/./src/selector-tag.ts","webpack://CssSelectorGenerator/./src/utilities-selectors.ts","webpack://CssSelectorGenerator/./src/selector-id.ts","webpack://CssSelectorGenerator/./src/selector-class.ts","webpack://CssSelectorGenerator/./src/selector-nth-of-type.ts","webpack://CssSelectorGenerator/./src/index.ts","webpack://CssSelectorGenerator/./src/selector-fallback.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CssSelectorGenerator\"] = factory();\n\telse\n\t\troot[\"CssSelectorGenerator\"] = factory();\n})(self, function() {\nreturn ","var extend = require('xtend/immutable');\n\n// Public API\nmodule.exports = cartesian;\n\n/**\n * Creates cartesian product of the provided properties\n *\n * @param   {object|array} list - list of (array) properties or array of arrays\n * @returns {array} all the combinations of the properties\n */\nfunction cartesian(list)\n{\n  var last, init, keys, product = [];\n\n  if (Array.isArray(list))\n  {\n    init = [];\n    last = list.length - 1;\n  }\n  else if (typeof list == 'object' && list !== null)\n  {\n    init = {};\n    keys = Object.keys(list);\n    last = keys.length - 1;\n  }\n  else\n  {\n    throw new TypeError('Expecting an Array or an Object, but `' + (list === null ? 'null' : typeof list) + '` provided.');\n  }\n\n  function add(row, i)\n  {\n    var j, k, r;\n\n    k = keys ? keys[i] : i;\n\n    // either array or not, not expecting objects here\n    Array.isArray(list[k]) || (typeof list[k] == 'undefined' ? list[k] = [] : list[k] = [list[k]]);\n\n    for (j=0; j < list[k].length; j++)\n    {\n      r = clone(row);\n      store(r, list[k][j], k);\n\n      if (i >= last)\n      {\n        product.push(r);\n      }\n      else\n      {\n        add(r, i + 1);\n      }\n    }\n  }\n\n  add(init, 0);\n\n  return product;\n}\n\n/**\n * Clones (shallow copy) provided object or array\n *\n * @param   {object|array} obj - object or array to clone\n * @returns {object|array} - shallow copy of the provided object or array\n */\nfunction clone(obj)\n{\n  return Array.isArray(obj) ? [].concat(obj) : extend(obj);\n}\n\n/**\n * Stores provided element in the provided object or array\n *\n * @param   {object|array} obj - object or array to add to\n * @param   {mixed} elem - element to add\n * @param   {string|number} key - object's property key to add to\n * @returns {void}\n */\nfunction store(obj, elem, key)\n{\n  Array.isArray(obj) ? obj.push(elem) : (obj[key] = elem);\n}\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/**\n * Returns `true` if provided input is Element.\n * @name isElement\n * @param {*} [input]\n * @returns {boolean}\n */\nexport default function (input) {\n  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input.nodeType === 1 && _typeof(input.style) === 'object' && _typeof(input.ownerDocument) === 'object';\n}","import isElement from 'iselement'\nimport {CssSelector} from './types'\n\n/**\n * Check whether element is matched uniquely by selector.\n */\nexport function testSelector (\n  element: Element,\n  selector: CssSelector,\n  root: ParentNode = document\n): boolean {\n  const result = root.querySelectorAll(selector)\n  return (result.length === 1 && result[0] === element)\n}\n\n/**\n * Find all parent elements of the element.\n */\nexport function getParents (\n  element: Element,\n  root = getRootNode(element)\n): Array<Element> {\n  const result = []\n  let parent = element\n  while (isElement(parent) && parent !== root) {\n    result.push(parent)\n    parent = parent.parentElement\n  }\n  return result\n}\n\n/**\n * Returns root node for given element. This needs to be used because of document-less environments, e.g. jsdom.\n */\nexport function getRootNode (element: Element): ParentNode {\n  return element.ownerDocument.querySelector(':root')\n}\n","import isElement from 'iselement'\nimport {CssSelector} from './types'\n\n/**\n * Get nth-child selector for an element.\n */\nexport function getNthChildSelector (element: Element): Array<CssSelector> {\n  const parent = element.parentNode\n\n  if (parent) {\n    let counter = 0\n    const siblings = parent.childNodes\n    for (let i = 0; i < siblings.length; i++) {\n      if (isElement(siblings[i])) {\n        counter += 1\n        if (siblings[i] === element) {\n          return [`:nth-child(${counter})`]\n        }\n      }\n    }\n  }\n\n  return []\n}\n","export const DESCENDANT_OPERATOR = ' > '\nexport const CHILD_OPERATOR = ' '\n\n// RegExp that will match invalid patterns that can be used in ID attribute.\nexport const INVALID_ID_RE = new RegExp([\n  '^$', // empty or not set\n  '\\\\s', // contains whitespace\n  '^\\\\d' // begins with a number\n].join('|'))\n\n// RegExp that will match invalid patterns that can be used in class attribute.\nexport const INVALID_CLASS_RE = new RegExp([\n  '^$', // empty or not set\n  '^\\\\d' // begins with a number\n].join('|'))\n\nexport const VALID_SELECTOR_TYPES = [\n  'id',\n  'class',\n  'tag',\n  'attribute',\n  'nthchild',\n  'nthoftype'\n] as const\n\n// Order in which a combined selector is constructed.\nexport const SELECTOR_PATTERN = [\n  'nthoftype',\n  'tag',\n  'id',\n  'class',\n  'attribute',\n  'nthchild'\n]\n","import {\n  CssSelectorGeneratorOptions,\n  CssSelectorMatch,\n  CssSelectorType\n} from './types'\nimport {VALID_SELECTOR_TYPES} from './constants'\n\nexport const DEFAULT_OPTIONS = {\n  selectors: ['id', 'class', 'tag', 'attribute'] as Array<CssSelectorType>,\n  // if set to true, always include tag name\n  includeTag: false,\n  whitelist: [] as Array<CssSelectorMatch>,\n  blacklist: [] as Array<CssSelectorMatch>,\n  combineWithinSelector: true,\n  combineBetweenSelectors: true,\n  root: document\n}\n\n/**\n * Constructs default options with proper root node for given element.\n * @see {@link getRootNode} for further info\n */\nexport function constructDefaultOptions (\n  element: Element\n): Record<string, unknown> {\n  return {\n    ...DEFAULT_OPTIONS,\n    root: element.ownerDocument.querySelector(':root')\n  }\n}\n\n/**\n * Makes sure returned value is a list containing only valid selector types.\n * @param input\n */\nexport function sanitizeSelectorTypes (input: unknown): Array<CssSelectorType> {\n  if (!Array.isArray(input)) {\n    return []\n  }\n  return input.filter((item) => VALID_SELECTOR_TYPES.includes(item))\n}\n\n/**\n * Checks whether provided value is of type RegExp.\n */\nexport function isRegExp (input: unknown): input is RegExp {\n  return input instanceof RegExp\n}\n\n/**\n * Checks whether provided value is usable in whitelist or blacklist.\n * @param input\n */\nexport function isCssSelectorMatch (input: unknown): input is CssSelectorMatch {\n  return (typeof input === 'string') || isRegExp(input)\n}\n\n/**\n * Converts input to a list of valid values for whitelist or blacklist.\n */\nexport function sanitizeCssSelectorMatchList (\n  input: unknown\n): Array<CssSelectorMatch> {\n  if (!Array.isArray(input)) {\n    return []\n  }\n  return input.filter(isCssSelectorMatch)\n}\n\n/**\n * Checks whether provided value is valid Node.\n */\nexport function isNode (input: unknown): input is Node {\n  return input instanceof Node\n}\n\n/**\n * Checks whether provided value is valid ParentNode.\n */\nexport function isParentNode (input: unknown): input is ParentNode {\n  const validNodeTypes = [\n    Node.DOCUMENT_NODE,\n    Node.DOCUMENT_FRAGMENT_NODE,\n    Node.ELEMENT_NODE\n  ]\n  return isNode(input) && validNodeTypes.includes(input.nodeType)\n}\n\n/**\n * Makes sure that the root node in options is valid.\n */\nexport function sanitizeRoot (input: unknown, element: Element): ParentNode {\n  return isParentNode(input)\n    ? input\n    : element.ownerDocument.querySelector(':root')\n}\n\n/**\n * Makes sure the options object contains all required keys.\n */\nexport function sanitizeOptions (\n  element: Element,\n  custom_options = {}\n): CssSelectorGeneratorOptions {\n  const options = {\n    ...DEFAULT_OPTIONS,\n    ...custom_options\n  }\n\n  return {\n    selectors: sanitizeSelectorTypes(options.selectors),\n    whitelist: sanitizeCssSelectorMatchList(options.whitelist),\n    blacklist: sanitizeCssSelectorMatchList(options.blacklist),\n    root: sanitizeRoot(options.root, element),\n    combineWithinSelector: !!options.combineWithinSelector,\n    combineBetweenSelectors: !!options.combineBetweenSelectors,\n    includeTag: !!options.includeTag\n  }\n}\n","import {CssSelectorMatch} from './types'\n\n/**\n * Creates all possible combinations of items in the list.\n */\nexport function getCombinations<T> (\n  items: Array<T> = []\n): Array<Array<T>> {\n  // see the empty first result, will be removed later\n  const result: Array<Array<T>> = [[]]\n\n  items.forEach((items_item) => {\n    result.forEach((result_item) => {\n      result.push(result_item.concat(items_item))\n    })\n  })\n\n  // remove seed\n  result.shift()\n\n  return result\n    // sort results by length, we want the shortest selectors to win\n    .sort((a, b) => a.length - b.length)\n}\n\n/**\n * Converts array of arrays into a flat array.\n */\nexport function flattenArray<T> (input: Array<Array<T>>): Array<T> {\n  return ([] as Array<T>).concat(...input)\n}\n\n/**\n * Convert string that can contain wildcards (asterisks) to RegExp source.\n */\nexport function wildcardToRegExp (input: string): string {\n  return input\n    // convert all special characters used by RegExp, except an asterisk\n    .replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n    // convert asterisk to pattern that matches anything\n    .replace(/\\*/g, '.+')\n}\n\n/**\n * Converts list of white/blacklist items to a single RegExp.\n */\nexport function convertMatchListToRegExp (\n  list: Array<CssSelectorMatch> = []\n): RegExp {\n  if (list.length === 0) {\n    return new RegExp('.^')\n  }\n  const combined_re = list\n    .map((item) => {\n      return (typeof item === 'string')\n        ? wildcardToRegExp(item)\n        : item.source\n    })\n    .join('|')\n  return new RegExp(combined_re)\n}\n","import {sanitizeSelectorItem} from './utilities-selectors'\nimport {convertMatchListToRegExp} from './utilities-data'\nimport {CssSelector} from './types'\n\n// List of attributes to be ignored. These are handled by different selector types.\nexport const ATTRIBUTE_BLACKLIST = convertMatchListToRegExp([\n  'class',\n  'id',\n  // Angular attributes\n  'ng-*'\n])\n\n/**\n * Get attribute selectors for an element.\n */\nfunction attributeNodeToSelector ({\n  nodeName,\n  nodeValue\n}: Node) {\n  return `[${nodeName}='${sanitizeSelectorItem(nodeValue)}']`\n}\n\n/**\n * Checks whether attribute should be used as a selector.\n */\nfunction isValidAttributeNode ({nodeName}: Node) {\n  return !ATTRIBUTE_BLACKLIST.test(nodeName)\n}\n\n/**\n * Get attribute selectors for an element.\n */\nexport function getAttributeSelectors (element: Element): Array<CssSelector> {\n  return Array.from(element.attributes)\n    .filter(isValidAttributeNode)\n    .map(attributeNodeToSelector)\n}\n","import {sanitizeSelectorItem} from './utilities-selectors'\nimport {CssSelector} from './types'\n\n/**\n * Get tag selector for an element.\n */\nexport function getTagSelector (element: Element): Array<CssSelector> {\n  return [sanitizeSelectorItem(element.tagName.toLowerCase())]\n}\n","import cartesian from 'cartesian'\nimport {\n  CHILD_OPERATOR,\n  DESCENDANT_OPERATOR,\n  SELECTOR_PATTERN\n} from './constants'\nimport {getAttributeSelectors} from './selector-attribute'\nimport {getClassSelectors} from './selector-class'\nimport {getIdSelector} from './selector-id'\nimport {getNthChildSelector} from './selector-nth-child'\nimport {getNthOfTypeSelector} from './selector-nth-of-type'\nimport {getTagSelector} from './selector-tag'\nimport {\n  convertMatchListToRegExp,\n  flattenArray,\n  getCombinations\n} from './utilities-data'\nimport {getParents, testSelector} from './utilities-dom'\nimport {\n  CssSelector,\n  CssSelectorData,\n  CssSelectorGeneratorOptions,\n  CssSelectorType,\n  IdentifiableParent\n} from './types'\n\nexport const ESCAPED_COLON = ':'\n  .charCodeAt(0)\n  .toString(16)\n  .toUpperCase()\n\n// Square brackets need to be escaped, but eslint has a problem with that.\n/* eslint-disable-next-line no-useless-escape */\nexport const SPECIAL_CHARACTERS_RE = /[ !\"#$%&'()\\[\\]{|}<>*+,./;=?@^`~\\\\]/\n\n/**\n * Escapes special characters used by CSS selector items.\n */\nexport function sanitizeSelectorItem (input = ''): string {\n  return input.split('')\n    .map((character) => {\n      if (character === ':') {\n        return `\\\\${ESCAPED_COLON} `\n      }\n      if (SPECIAL_CHARACTERS_RE.test(character)) {\n        return `\\\\${character}`\n      }\n      return escape(character)\n        .replace(/%/g, '\\\\')\n    })\n    .join('')\n}\n\nexport const SELECTOR_TYPE_GETTERS = {\n  tag: getTagSelector,\n  id: getIdSelector,\n  class: getClassSelectors,\n  attribute: getAttributeSelectors,\n  nthchild: getNthChildSelector,\n  nthoftype: getNthOfTypeSelector\n}\n\n/**\n * Returns list of selectors of given type for the element.\n */\nexport function getSelectorsByType (\n  element: Element,\n  selector_type: CssSelectorType\n): Array<CssSelector> {\n  return (SELECTOR_TYPE_GETTERS[selector_type] || (() => []))(element)\n}\n\n/**\n * Remove blacklisted selectors from list.\n */\nexport function filterSelectors (\n  list: Array<CssSelector> = [],\n  blacklist_re: RegExp,\n  whitelist_re: RegExp\n): Array<CssSelector> {\n  return list.filter((item) => (\n    whitelist_re.test(item)\n    || !blacklist_re.test(item)\n  ))\n}\n\n/**\n * Prioritise whitelisted selectors in list.\n */\nexport function orderSelectors (\n  list: Array<CssSelector> = [],\n  whitelist_re: RegExp\n): Array<CssSelector> {\n  return list.sort((a, b) => {\n    const a_is_whitelisted = whitelist_re.test(a)\n    const b_is_whitelisted = whitelist_re.test(b)\n    if (a_is_whitelisted && !b_is_whitelisted) {\n      return -1\n    }\n    if (!a_is_whitelisted && b_is_whitelisted) {\n      return 1\n    }\n    return 0\n  })\n}\n\n/**\n * Returns list of unique selectors applicable to given element.\n */\nexport function getAllSelectors (\n  element: Element,\n  root: ParentNode,\n  options: CssSelectorGeneratorOptions\n): Array<CssSelector> {\n  const selectors_list = getSelectorsList(element, options)\n  const type_combinations = getTypeCombinations(selectors_list, options)\n  const all_selectors = flattenArray(type_combinations) as Array<CssSelector>\n  return [...new Set(all_selectors)]\n}\n\n/**\n * Creates object containing all selector types and their potential values.\n */\nexport function getSelectorsList (\n  element: Element,\n  options: CssSelectorGeneratorOptions\n): CssSelectorData {\n  const {\n    blacklist,\n    whitelist,\n    combineWithinSelector\n  } = options\n\n  const blacklist_re = convertMatchListToRegExp(blacklist)\n  const whitelist_re = convertMatchListToRegExp(whitelist)\n\n  const reducer = (data: CssSelectorData, selector_type: CssSelectorType) => {\n    const selectors_by_type = getSelectorsByType(element, selector_type)\n    const filtered_selectors =\n      filterSelectors(selectors_by_type, blacklist_re, whitelist_re)\n    const found_selectors = orderSelectors(filtered_selectors, whitelist_re)\n\n    data[selector_type] = combineWithinSelector\n      ? getCombinations(found_selectors)\n      : found_selectors.map((item) => [item])\n\n    return data\n  }\n\n  return getSelectorsToGet(options)\n    .reduce(reducer, {})\n}\n\n/**\n * Creates list of selector types that we will need to generate the selector.\n */\nexport function getSelectorsToGet (\n  options: CssSelectorGeneratorOptions\n): Array<CssSelectorType> {\n  const {\n    selectors,\n    includeTag\n  } = options\n\n  const selectors_to_get = [].concat(selectors)\n  if (includeTag && !selectors_to_get.includes('tag')) {\n    selectors_to_get.push('tag')\n  }\n  return selectors_to_get\n}\n\n/**\n * Adds \"tag\" to a list, if it does not contain it. Used to modify selectors\n * list when includeTag option is enabled to make sure all results contain the\n * TAG part.\n */\nfunction addTagTypeIfNeeded (\n  list: Array<CssSelectorType>\n): Array<CssSelectorType> {\n  return (list.includes('tag') || list.includes('nthoftype'))\n    ? [...list]\n    : [...list, 'tag']\n}\n\n/**\n * Generates list of possible selector type combinations.\n */\nexport function combineSelectorTypes (\n  options: CssSelectorGeneratorOptions\n): Array<Array<CssSelectorType>> {\n  const {\n    selectors,\n    combineBetweenSelectors,\n    includeTag\n  } = options\n\n  const combinations = combineBetweenSelectors\n    ? getCombinations(selectors)\n    : selectors.map(item => [item])\n\n  return includeTag\n    ? combinations.map(addTagTypeIfNeeded)\n    : combinations\n}\n\n/**\n * Generates list of combined CSS selectors.\n */\nexport function getTypeCombinations (\n  selectors_list: CssSelectorData,\n  options: CssSelectorGeneratorOptions\n): Array<Array<CssSelector>> {\n  return combineSelectorTypes(options)\n    .map((item) => {\n      return constructSelectors(item, selectors_list)\n    })\n    .filter((item) => item.length > 0)\n}\n\n/**\n * Generates all variations of possible selectors from provided data.\n */\nexport function constructSelectors (\n  selector_types: Array<CssSelectorType>,\n  selectors_by_type: CssSelectorData\n): Array<CssSelector> {\n  const data: CssSelectorData = {}\n  selector_types.forEach((selector_type) => {\n    const selector_variants = selectors_by_type[selector_type]\n    if (selector_variants.length > 0) {\n      data[selector_type] = selector_variants\n    }\n  })\n\n  const combinations = cartesian(data)\n  return combinations.map(constructSelector)\n}\n\n/**\n * Creates selector for given selector type. Combines several parts if needed.\n */\nexport function constructSelectorType (\n  selector_type: CssSelectorType,\n  selectors_data: CssSelectorData\n): CssSelector {\n  return (selectors_data[selector_type])\n    ? selectors_data[selector_type].join('')\n    : ''\n}\n\n/**\n * Converts selector data object to a selector.\n */\nexport function constructSelector (\n  selectorData: CssSelectorData = {}\n): CssSelector {\n  const pattern = [...SELECTOR_PATTERN]\n  // selector \"nthoftype\" already contains \"tag\"\n  if (selectorData['tag'] && selectorData['nthoftype']) {\n    pattern.splice(pattern.indexOf('tag'), 1)\n  }\n\n  return pattern\n    .map((type) => constructSelectorType(type as CssSelectorType, selectorData))\n    .join('')\n}\n\n/**\n * Generator of CSS selector candidates for given element, from simplest child selectors to more complex descendant selectors.\n */\nexport function getElementSelectorCandidates (\n  element: Element,\n  root: ParentNode,\n  options: CssSelectorGeneratorOptions\n): Array<CssSelector> {\n  const result = []\n  const selectorCandidates = getAllSelectors(element, root, options)\n  for (const selectorCandidate of selectorCandidates) {\n    result.push(CHILD_OPERATOR + selectorCandidate)\n  }\n  if (root === element.parentNode) {\n    for (const selectorCandidate of selectorCandidates) {\n      result.push(DESCENDANT_OPERATOR + selectorCandidate)\n    }\n  }\n  return result\n}\n\n/**\n * Tries to find an unique CSS selector for element within given parent.\n */\nexport function getSelectorWithinRoot (\n  element: Element,\n  root: ParentNode,\n  rootSelector: CssSelector = '',\n  options: CssSelectorGeneratorOptions\n): (null | CssSelector) {\n  const selectorCandidates =\n    getElementSelectorCandidates(element, options.root, options)\n  for (const candidateSelector of selectorCandidates) {\n    const attemptSelector = (rootSelector + candidateSelector).trim()\n    if (testSelector(element, attemptSelector, options.root)) {\n      return attemptSelector\n    }\n  }\n  return null\n}\n\n/**\n * Climbs through parents of the element and tries to find the one that is identifiable by unique CSS selector.\n */\nexport function getClosestIdentifiableParent (\n  element: Element,\n  root: ParentNode,\n  rootSelector: CssSelector = '',\n  options: CssSelectorGeneratorOptions\n): IdentifiableParent {\n  for (const currentElement of getParents(element, root)) {\n    const result =\n      getSelectorWithinRoot(currentElement, root, rootSelector, options)\n    if (result) {\n      return {\n        foundElement: currentElement,\n        selector: result\n      }\n    }\n  }\n  return null\n}\n","import {sanitizeSelectorItem} from './utilities-selectors'\nimport {INVALID_ID_RE} from './constants'\nimport {testSelector} from './utilities-dom'\nimport {CssSelector} from './types'\n\n/**\n * Get ID selector for an element.\n */\nexport function getIdSelector (element: Element): Array<CssSelector> {\n  const id = element.getAttribute('id') || ''\n  const selector = `#${sanitizeSelectorItem(id)}`\n  return (\n    !INVALID_ID_RE.test(id)\n    && testSelector(element, selector, element.ownerDocument)\n  )\n    ? [selector]\n    : []\n}\n","import {sanitizeSelectorItem} from './utilities-selectors'\nimport {INVALID_CLASS_RE} from './constants'\nimport {CssSelector} from './types'\n\n/**\n * Get class selectors for an element.\n */\nexport function getClassSelectors (element: Element): Array<CssSelector> {\n  return (element.getAttribute('class') || '')\n    .trim()\n    .split(/\\s+/)\n    .filter((item) => !INVALID_CLASS_RE.test(item))\n    .map((item) => `.${sanitizeSelectorItem(item)}`)\n}\n","import {getTagSelector} from './selector-tag'\nimport {CssSelector} from './types'\n\n/**\n * Get nth-of-type selector for an element.\n */\nexport function getNthOfTypeSelector (element: Element): Array<CssSelector> {\n  const tag = getTagSelector(element)[0]\n  const parentElement = element.parentElement\n\n  if (parentElement) {\n    const siblings = parentElement.querySelectorAll(tag)\n    for (let i = 0; i < siblings.length; i++) {\n      if (siblings[i] === element) {\n        return [`${tag}:nth-of-type(${i + 1})`]\n      }\n    }\n  }\n\n  return []\n}\n","import {getFallbackSelector} from './selector-fallback'\nimport {sanitizeOptions} from './utilities-options'\nimport {getClosestIdentifiableParent} from './utilities-selectors'\nimport {CssSelector} from './types'\n\n/**\n * Generates unique CSS selector for an element.\n */\nexport function getCssSelector (\n  element: Element,\n  custom_options = {}\n): CssSelector {\n  const options = sanitizeOptions(element, custom_options)\n  let partialSelector = ''\n  let currentRoot = options.root\n\n  /**\n   * Utility function to make subsequent calls shorter.\n   */\n  function updateIdentifiableParent () {\n    return getClosestIdentifiableParent(\n      element,\n      currentRoot,\n      partialSelector,\n      options\n    )\n  }\n\n  let closestIdentifiableParent = updateIdentifiableParent()\n  while (closestIdentifiableParent) {\n    const {\n      foundElement,\n      selector\n    } = closestIdentifiableParent\n    if (foundElement === element) {\n      return selector\n    }\n    currentRoot = foundElement\n    partialSelector = selector\n    closestIdentifiableParent = updateIdentifiableParent()\n  }\n\n  return getFallbackSelector(element)\n}\n\nexport default getCssSelector\n","import {getParents} from './utilities-dom'\nimport {getNthChildSelector} from './selector-nth-child'\nimport {DESCENDANT_OPERATOR} from './constants'\nimport {CssSelector} from './types'\n\n/**\n * Creates chain if :nth-child selectors from root to the element.\n */\nexport function getFallbackSelector (element: Element): CssSelector {\n  const selectors = getParents(element)\n    .map((element) => getNthChildSelector(element)[0])\n    .reverse()\n  return [':root', ...selectors].join(DESCENDANT_OPERATOR)\n}\n"],"names":["root","factory","exports","module","define","amd","self","extend","store","obj","elem","key","Array","isArray","push","list","last","init","keys","product","length","TypeError","Object","add","row","i","j","k","r","concat","target","arguments","source","hasOwnProperty","call","prototype","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","prop","Symbol","toStringTag","value","_typeof","iterator","constructor","input","nodeType","style","ownerDocument","testSelector","element","selector","document","result","querySelectorAll","getParents","querySelector","getRootNode","parent","parentElement","getNthChildSelector","parentNode","counter","siblings","childNodes","INVALID_ID_RE","RegExp","join","INVALID_CLASS_RE","VALID_SELECTOR_TYPES","SELECTOR_PATTERN","DEFAULT_OPTIONS","selectors","includeTag","whitelist","blacklist","combineWithinSelector","combineBetweenSelectors","isCssSelectorMatch","isRegExp","sanitizeCssSelectorMatchList","filter","sanitizeRoot","validNodeTypes","Node","DOCUMENT_NODE","DOCUMENT_FRAGMENT_NODE","ELEMENT_NODE","isNode","includes","isParentNode","getCombinations","items","forEach","items_item","result_item","shift","sort","b","convertMatchListToRegExp","combined_re","map","item","replace","ATTRIBUTE_BLACKLIST","attributeNodeToSelector","nodeName","nodeValue","sanitizeSelectorItem","isValidAttributeNode","test","getTagSelector","tagName","toLowerCase","ESCAPED_COLON","charCodeAt","toString","toUpperCase","SPECIAL_CHARACTERS_RE","split","character","escape","SELECTOR_TYPE_GETTERS","tag","id","getAttribute","class","trim","attribute","from","attributes","nthchild","nthoftype","addTagTypeIfNeeded","constructSelector","selectorData","pattern","splice","indexOf","type","constructSelectorType","selectors_data","selector_type","getSelectorWithinRoot","rootSelector","options","selectorCandidates","all_selectors","selectors_list","combinations","combineSelectorTypes","selector_types","selectors_by_type","data","selector_variants","constructSelectors","getTypeCombinations","blacklist_re","whitelist_re","selectors_to_get","getSelectorsToGet","reduce","found_selectors","a_is_whitelisted","b_is_whitelisted","orderSelectors","filterSelectors","getSelectorsByType","getSelectorsList","Set","getAllSelectors","selectorCandidate","getElementSelectorCandidates","candidateSelector","attemptSelector","getCssSelector","custom_options","sanitizeOptions","partialSelector","currentRoot","updateIdentifiableParent","currentElement","foundElement","getClosestIdentifiableParent","closestIdentifiableParent","reverse","getFallbackSelector"],"sourceRoot":""}